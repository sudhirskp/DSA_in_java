package SlidingWindow;

import java.util.ArrayDeque;
import java.util.Arrays;

public class MaxWindow {

    public int[] maxSlidingWindow(int[] nums, int k){
        int n = nums.length;
        int res [] = new int[n - k + 1];
        if (n == 0 || k > n) {
            return new int[0];
        }
        ArrayDeque<Integer> deq = new ArrayDeque<>();
        int index =0;
        while(index<k){
            if(!deq.isEmpty() && nums[deq.peekLast()]<=nums[index]){
                deq.pollLast();
            }
            deq.offerLast(index++);

        }
        res [0] = nums[deq.peekFirst()];

        for(int i=1;i<n-k+1;i++){
            if(!deq.isEmpty() && deq.peekFirst() <=(i-1)){
                deq.pollFirst();
            }
            while(!deq.isEmpty() && nums[deq.peekLast()]<=nums[i+k-1]){
                deq.pollLast();
            }
            deq.offerLast(i+k-1);
            res[i] = nums[deq.peekFirst()];
        }

        return res;

    }

    public static void main(String[] args) {
        MaxWindow mw = new MaxWindow();
        int[] nums = {4,3,11};
        int k = 3;
        int[] result = mw.maxSlidingWindow(nums, k);
        System.out.println(Arrays.toString(result)); // Output: [11]
    }
}

//239. Sliding Window Maximum
//        Hard
//Topics
//        Companies
//Hint
//You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.
//
//Return the max sliding window.
//        Example 1:
//
//Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
//Output: [3,3,5,5,6,7]
//Explanation:
//Window position                Max
//---------------               -----
//        [1  3  -1] -3  5  3  6  7       3
//        1 [3  -1  -3] 5  3  6  7       3
//        1  3 [-1  -3  5] 3  6  7       5
//        1  3  -1 [-3  5  3] 6  7       5
//        1  3  -1  -3 [5  3  6] 7       6
//        1  3  -1  -3  5 [3  6  7]      7
//Example 2:
//
//Input: nums = [1], k = 1
//Output: [1]


